homecontroller:
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Mvc;
namespace WebApplication12.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {

            return View();
        }
//        [HttpPost]
//        public string DecryptStringAES(string cipherText)
//        {
//            var keybytes = Encoding.UTF8.GetBytes("8080808080808080");
//            var iv = Encoding.UTF8.GetBytes("8080808080808080");
//            var encrypted = Convert.FromBase64String(cipherText);
//            var decriptedFromJavascript = DecryptStringFromBytes(encrypted, keybytes, iv);
//            return "DecryptStringAES";
//        }
//     public string DecryptStringFromBytes(byte[] cipherText, byte[] key, byte[] iv)
//        {
//            string plaintext = null;
//            using (var rijAlg = new RijndaelManaged())
//            {
//                rijAlg.Mode = CipherMode.CBC;
//                rijAlg.Padding = PaddingMode.PKCS7;
//                rijAlg.FeedbackSize = 128;
//                rijAlg.Key = key;
//                rijAlg.IV = iv;
//                // Create a decrytor to perform the stream transform.  
//                var decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);
//                // Create the streams used for decryption.  
//                var msDecrypt = new MemoryStream(cipherText);
//                {
//                    var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
//                    var srDecrypt = new StreamReader(csDecrypt);
//                        {
//                            // Read the decrypted bytes from the decrypting stream  
//                            // and place them in a string.  
//                            plaintext = srDecrypt.ReadToEnd();
//                        }
//                    }
//            }
//            return plaintext;
//        }
[HttpPost]
        public string DecryptStringAES(string cipherText)
        {
            var keybytes = Encoding.UTF8.GetBytes("7061737323313233");
            var iv = Encoding.UTF8.GetBytes("7061737323313233");
            var encrypted = Convert.FromBase64String(cipherText);
            var decriptedFromJavascript = DecryptStringFromBytes(encrypted, keybytes, iv);
            return "roundtrip result:"+ decriptedFromJavascript;
        }

        private static string DecryptStringFromBytes(byte[] cipherText, byte[] key, byte[] iv)
        {
            // Check arguments.
            if (cipherText == null || cipherText.Length <= 0)
            {
                throw new ArgumentNullException("cipherText");
            }
            if (key == null || key.Length <= 0)
            {
                throw new ArgumentNullException("key");
            }
            if (iv == null || iv.Length <= 0)
            {
                throw new ArgumentNullException("key");
            }

            // Declare the string used to hold
            // the decrypted text.
            string plaintext = null;

            // Create an RijndaelManaged object
            // with the specified key and IV.
            using (var rijAlg = new RijndaelManaged())
            {
                //Settings
                rijAlg.Mode = CipherMode.CBC;
                rijAlg.Padding = PaddingMode.PKCS7;
                rijAlg.FeedbackSize = 128;

                rijAlg.Key = key;
                rijAlg.IV = iv;

                // Create a decrytor to perform the stream transform.
                var decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);

                // Create the streams used for decryption.
                using (var msDecrypt = new MemoryStream(cipherText))
                {
                    using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (var srDecrypt = new StreamReader(csDecrypt))
                        {
                            // Read the decrypted bytes from the decrypting stream
                            // and place them in a string.
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
            }

            return plaintext;
        }

        // private static byte[] EncryptStringToBytes(string plainText, byte[] key, byte[] iv)
        public string EncryptStringToBytes()
        {
            // Check arguments.
            //if (plainText == null || plainText.Length <= 0)
            //{
            //    throw new ArgumentNullException("plainText");
            //}
            //if (key == null || key.Length <= 0)
            //{
            //    throw new ArgumentNullException("key");
            //}
            //if (iv == null || iv.Length <= 0)
            //{
            //    throw new ArgumentNullException("key");
            //}
            string plainText = "It works";
            var key = Encoding.UTF8.GetBytes("7061737323313233");
            var iv = Encoding.UTF8.GetBytes("7061737323313233");
            byte[] encrypted;
            // Create a RijndaelManaged object
            // with the specified key and IV.
            using (var rijAlg = new RijndaelManaged())
            {
                rijAlg.Mode = CipherMode.CBC;
                rijAlg.Padding = PaddingMode.PKCS7;
                rijAlg.FeedbackSize = 128;
                rijAlg.Key = key;
                rijAlg.IV = iv;

                // Create a decrytor to perform the stream transform.
                var encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);

                // Create the streams used for encryption.
                using (var msEncrypt = new MemoryStream())
                {
                    using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (var swEncrypt = new StreamWriter(csEncrypt))
                        {
                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }
            string a= Convert.ToBase64String(encrypted);
        // string a=   String.Join("", encrypted);
            // Return the encrypted bytes from the memory stream.
            return a;
        }



    }
   }
   
   
   
   index.html
   <!DOCTYPE html>
<html>
<head>
</head>
<body>
    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core-min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js"></script>
    <script type="text/javascript" src="https://rawgit.com/ricmoo/aes-js/master/index.js"></script>
    <script>
        $(document).ready(function () {



            var key = CryptoJS.enc.Utf8.parse('7061737323313233');
            var iv = CryptoJS.enc.Utf8.parse('7061737323313233');
            var encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse("It works"), key,
                {
                    keySize: 128 / 8,
                    iv: iv,
                    mode: CryptoJS.mode.CBC,
                    padding: CryptoJS.pad.Pkcs7
                });

            var decrypted = CryptoJS.AES.decrypt(encrypted, key, {
                keySize: 128 / 8,
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });

            alert('Encrypted :' + encrypted);
            $("#enc").val(encrypted);
            alert('Key :' + encrypted.key);
            alert('iv :' + encrypted.iv);
            alert('Decrypted : ' + decrypted);
            alert('utf8 = ' + decrypted.toString(CryptoJS.enc.Utf8));

       });
    </script>

    <form method="post" action="Home/DecryptStringAES">
       <input type="text" name="cipherText" id="enc"/>
        <input type="submit" />
        
    </form>
</body>
</html>
